/*
	Data transmission and reception with VirtualJTAG
*/

module vjtag_uart (
	// Define inputs and outputs for the module
	input  wire p_reset,       // Global reset
	input  wire m_clock,       // Main clock
	output wire recv_init,     // Signal initialization for receiving
	output wire recv,          // Signal for receiving data
	output wire [7:0] recv_data, // Data being received
	output wire send_init,     // Signal initialization for sending
	output wire send_ready,    // Signal indicating ready to send
	input  wire send,          // Signal to start sending
	input  wire [7:0] send_data  // Data to send
);

	// Internal wires for VirtualJTAG connection
	wire [7:0] ir_in;
	wire tck, tdi, tdo;
	wire virtual_state_sdr, virtual_state_uir;

	// Instance of VirtualJTAG module
   VirtualJTAG vjtag (
	    .tdo(tdo),                      // TDO (Test Data Output) is the output data line from the JTAG module.
	    .ir_in(ir_in),                  // Input register to load JTAG instructions.
	    .tck(tck),                      // TCK (Test Clock) is the clock signal used by the JTAG interface.
	    .tdi(tdi),                      // TDI (Test Data Input) is the input data line to the JTAG module.
	    .virtual_state_sdr(virtual_state_sdr),  // A signal that indicates if the JTAG state machine is in the Shift-DR state.
	    .virtual_state_uir(virtual_state_uir)   // A signal that indicates if the JTAG state machine is in the Update-IR state.
   );


	// Define constants for receive and send commands
	localparam COMMAND_RECV = 8'h41;
	localparam COMMAND_SEND = 8'h42;

	// Internal registers for control and data
	reg t_init, t_recv, t_send;
	reg [7:0] ir, dr, ds;
	reg [2:0] count;

	// Main state machine logic
	always @(posedge p_reset or posedge tck) begin
		if(p_reset) begin  // Reset all states
			t_init <= 0;
			t_recv <= 0;
			t_send <= 0;
		end
		else if(virtual_state_uir) begin  // Update the instruction register
			ir <= ir_in;
			t_init <= 1;
		end	
		else if(t_init) begin  // If instruction is recognized, prepare for data phase
			count <= 0;
			if(ir==COMMAND_SEND) t_send <= 1;
			t_init <= 0;
		end
		else if(virtual_state_sdr) begin  // Data shift phase
			dr[count] <= tdi;  // Load data from TDI
			count <= count + 1;
			if(count==7) begin  // Once all data is received
				if(ir==COMMAND_RECV) t_recv <= 1;
				if(ir==COMMAND_SEND) t_send <= 1;
			end
			else begin  // Not all data received, continue to wait
				if(ir==COMMAND_RECV) t_recv <= 0;
				if(ir==COMMAND_SEND) t_send <= 0;
			end
		end
	end

	// Synchronization for initialization signal with main clock domain
	reg [2:0] m_init;
	always @(posedge p_reset or posedge m_clock) begin
		if(p_reset)
			m_init <= 3'b000;
		else
			m_init <= {m_init[1:0], t_init};
	end

	// Detect rising edge of initialization signals
	assign recv_init = (ir==COMMAND_RECV && m_init[2:1]==2'b01) ? 1 : 0;
	assign send_init = (ir==COMMAND_SEND && m_init[2:1]==2'b01) ? 1 : 0;

	// Synchronization for receiving signal with main clock domain
	reg [2:0] m_recv;
	always @(posedge p_reset or posedge m_clock) begin
		if(p_reset)
			m_recv <= 3'b000;
		else
			m_recv <= {m_recv[1:0], t_recv};
	end

	// Assigning received data and signal
	assign recv_data = dr;
	assign recv = m_recv[2:1]==2'b01 ? 1 : 0;

	// Synchronization for sending signal with main clock domain
	reg [2:0] m_send;
	always @(posedge p_reset or posedge m_clock) begin
		if(p_reset)
			m_send <= 3'b000;
		else
			m_send <= {m_send[1:0], t_send};
	end

	// Indicate when ready to send data
	assign send_ready = m_send[2:1]==2'b01 ? 1 : 0;

	// Load data to send when send signal is asserted
	always @(posedge p_reset or posedge m_clock) begin
		if(p_reset)
			ds <= 8'h00;
		else if(send)
			ds <= send_data;
	end

	// Assign data out to TDO pin for transmission
	assign tdo = ds[count];

endmodule
